-- -----------------------------------------------------------------------------------------------
-- dnsdist2.conf - with NO text debugging comments.......
--                 see dnsdist2-debug.conf for a copy with text debugging.
-- Seth Ornstein - sornstein@globalcyberalliance.org
-- 6/7/2017
-- for use in testing out new Lua commands for dnsdist
-- git clone -b dnsdist-mod2 https://github.com/GlobalCyberAlliance/pdns.git
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script starting ----------------- %s ", "dnsdist2.conf"))

   warnlog(string.format("Script starting ----------------- %s ", os.date("%X-%x")))

   warnlog(string.format("Script starting ----------------- Lua Version: %s  - (should be 5.1)", _VERSION))



   strTestDns1 = "1jw2mr4fmky.net"                          -- test #1 dns lookup name - (reject)

   maintCounter = 0                                         -- maintainance counter

   bDebugCheckBL = false                                    -- true if debugging luaCheckBL
   bDebugLogBL = false                                      -- true if debugging luaLogBL
   bDebugLogForward = false                                 -- true if debugging luaLogForward
   bDebugLogCache = false                                   -- true if debugging luaLogCache
   bDebugRetNXDOMAIN = false                                -- true if debugging luaRetNXDOMAIN



-- -----------------------------------------------------------------------------------------------

-- -----------------------------------------------------------------------------------------------
-- setup servers to use
   warnlog(string.format("Script starting ----------------- %s ", "*** setup servers to use ***"))
-- -----------------------------------------------------------------------------------------------

--newServer({address="64.6.64.6:53",       name="Verisign_1", pool="masterpool"})       -- verisign dns server #1
--newServer({address="64.6.65.6:53",       name="Verisign_2", pool="masterpool"})       -- verisign dns server #2
newServer({address="8.8.8.8:53",         name="Google_1", pool="masterpool"})         -- google dns server #1
newServer({address="8.8.4.4:53",         name="Google_2", pool="masterpool"})         -- google dns server #2
--newServer({address="208.67.222.222:53",  name="Opendns_1", pool="masterpool"})        -- opendns dns server #1
--newServer({address="208.67.220.220:53",  name="Opendns_2", pool="masterpool"})        -- opendns dns server #2


-- -----------------------------------------------------------------------------------------------
-- set up the cache 
-- 10000 ->  maximum number of entries stored in the cache (required)
-- 86400 ->  maximum lifetime of an entry in the cache (seconds)
--     0 ->  minimum TTL an entry should have to be considered for insertion in the cache (seconds)
--    60 ->  TTL used for a Server Failure or a Refused response (seconds)
--    60 ->  TTL that will be used when a stale cache entry is returned (seconds)
   warnlog(string.format("Script starting ----------------- %s ", "*** setup cache *** "))
-- -----------------------------------------------------------------------------------------------

   pc = newPacketCache(10000, 86400, 0, 60, 60)         -- new cache
   getPool("masterpool"):setCache(pc)                   -- masterpool cache


   setStaleCacheEntriesTTL(3600)			-- If no backends working, use cached data


-- -----------------------------------------------------------------------------------------------
-- listen on local port 5200
   warnlog(string.format("Script starting ----------------- %s ", "*** listen on port 0.0.0.0:5200 for DNS requests ***"))
-- -----------------------------------------------------------------------------------------------

   setLocal("0.0.0.0:5200")


   rlBlkLst = newRemoteLogger('127.0.0.1:60000')              -- rpz hit protobuf handler for local address, port 60,000
   rlCache  = newRemoteLogger('127.0.0.1:60000')              -- cache hit protobuf handler for local address, port 60,000
   rlFwd    = newRemoteLogger('127.0.0.1:60000')              -- forward protobuf handler for local address, port 60,000


-- -----------------------------------------------------------------------------------------------
-- maintenance() function called every second

   function maintenance()

   if ((maintCounter % 60) == 0) then                     -- do this once a minute
       print(string.format("\n    maintenance() - %s", os.date("%X-%x")))

       local tableStat = getStatisticsCounters()          -- display statistics
       for k, v in pairs( tableStat ) do
           print(string.format("       %-23s  %d ", k, v))
       end


   end
   maintCounter = maintCounter + 1
   end

-- -----------------------------------------------------------------------------------------------
-- luaCheckBL() - check for rpz hit
-- if in blacklist then spoof response
-- else forward normally to masterpool 
   warnlog(string.format("Script starting ----------------- %s ", "*** luaCheckBL() *** "))
-- -----------------------------------------------------------------------------------------------

    function luaCheckBL(dq)



	local tKey   = dq.qname:toString()                      -- get dns name client requested to be looked up
	if(tKey ~= nil)
     	then
		local tKey2  = string.sub(tKey, 1, string.len(tKey) - 1)        -- get rid of final period at end of dnsname
                if(tKey2 == strTestDns1)
		then
                        dq:setTag("Trans", "RPZ")                 		-- label this transaction as rpz for protobuf - NEW LUA COMMAND - 5/22/2017
                        dq:setTag("RPZ-Info", "reject-example")        		-- store blacklist extra data in dq for protobuf later -- NEW LUA COMMAND - 5/22/2017

                        local tableTags = {}                                    -- create a table as an experiment
                        tableTags["TestLabel1"] = "Test Value One"              -- add transaction type to table
                        tableTags["TestLabel2"] = "Test Value Two"              -- add transaction type to table
                        dq:setTagArray(tableTags)                               -- store table in dq for protobuf later -- NEW LUA COMMAND - 6/2/2017


			return DNSAction.None, ""	-- continue to the next rule

		end
	end


	return DNSAction.Pool, "masterpool"		-- use the specified pool to forward this query

    end

-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a BlackList (RPZ) hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogBL() ->  127.0.0.1:60000 ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogBL(dr, pbMsg)		-- this is the lua code that executes for a request




              
   local tableTags = dr:getTagArray()			-- get array of tags inserted by setTag() - NEW LUA COMMAND - 5/24/2017



   local tablePB = {}
   for k, v in pairs( tableTags) do
	table.insert(tablePB, k .. ", " .. v)
   end

   pbMsg:setTagArray(tablePB)		   	-- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017


 
   pbMsg:setResponseCode(dnsdist.NXDOMAIN)        	-- set protobuf response code to be NXDOMAIN




   local strReqName = dr.qname:toString()		  -- get request dns name


  pbMsg:setProtobufResponseType()	   		-- set time, but no RR - no seconds or uSec values


--   pbMsg:setProtobufResponseType(os.time(), 789) 	-- set optional time seconds and optional micro-second value

--   pbMsg:setProtobufResponseType(os.time())	   	-- set optional time seconds, but no uSec value


   blobData = '\127' .. '\000' .. '\000' .. '\001'	-- 127.0.0.1, note: lua 5.1 can only embed decimal not hex

   pbMsg:addResponseRR(strReqName, 1, 1, 456, blobData)    -- set protobuf to look like a response and not a query, insert query time  -- NEW LUA COMMAND
                                                -- strReqName - The DNS name that was sent by the client to be looked up.
						-- timestamp  - Timestamp for protobuf field 
                                                -- timestamp  - microseconds 
						-- rr type
						-- rr class
						-- rr ttl	
						-- rr blob data  



end



-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a normal forwarding happens
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogForward() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogForward(dr, pbMsg)



--   local tableTags = {}                 -- create a table
 --  tableTags["Trans"] = "FWD"           -- add transaction type to table


 --  pbMsg:setTagArray(tableTags)		         -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, FWD")




end




-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a Cache hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogCache() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogCache(dr, pbMsg)		-- this is the lua code that executes after a cache hit

 

--   local tableTags = {}                 -- create a table
--   tableTags["Trans"] = "CACHE"         -- add transaction type to table


 --  pbMsg:setTagArray(tableTags)		         -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, CACHE")

end




-- ----------------------------------------------------------------------------------------------
								-- put this here so blacklist sends out protobuf......
function luaRetNXDOMAIN(dq)

	return DNSAction.Nxdomain, ""		-- return NXDOMAIN response to client
end




-- -----------------------------------------------------------------------------------------------
-- Rules
   warnlog(string.format("Script starting ----------------- %s ", "*** setting rules *** "))
-- -----------------------------------------------------------------------------------------------


   addLuaAction(AllRule(), luaCheckBL)		              -- first, check blacklist, if match process next rule below, else send to "masterpool"

   addAction(AllRule(), RemoteLogAction(rlBlkLst, luaLogBL))  -- then send out protobuf for rpz hit 

   addLuaAction(AllRule(), luaRetNXDOMAIN)		      -- then send nxdomain response back to the client.

   addAction(AllRule(), PoolAction("masterpool"))	      -- direct requests that are not RPZ to pool "masterpool"		


   addCacheHitResponseAction(AllRule(), RemoteLogResponseAction(rlCache, luaLogCache))	-- used to send out protobuf on cache hit 

 
   addResponseAction(AllRule(), RemoteLogResponseAction(rlFwd, luaLogForward))		-- used to send out protobuf on forward (normal) out 

-- -----------------------------------------------------------------------------------------------
-- finished setting up script
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script finished ----------------- %s ", os.date("%X-%x")))

