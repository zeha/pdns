-- -----------------------------------------------------------------------------------------------
-- dnsdist-named-cache.conf - named cache example - 8/2/2017 
--                 
-- Seth Ornstein - sornstein@globalcyberalliance.org
-- 8/2/2017
-- for use in testing out new Lua "named cache" commands for dnsdist
-- git clone -b dnsdist-mod2 https://github.com/GlobalCyberAlliance/pdns.git
--
-- new commands added for named cache:
--
--		nc = newNamedCache(cdb-file-name,cache-entries)
--
--		local cacheResult = nc:lookup(name-to-lookup)
--
--		cacheResult = {
--			found = true,
--			data = "blocked_by=threatstop, alienvalue:blocked_since=<timestamp>"
--			}
--
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script starting ----------------- %s ", "dnsdist-named_cache.conf"))

   warnlog(string.format("Script starting ----------------- %s ", os.date("%X-%x")))

   warnlog(string.format("Script starting ----------------- Lua Version: %s  - (should be 5.1)", _VERSION))

   strCDB = "../../zzz-gca-example/CDB_Database/blocklist.cdb" 

   warnlog(string.format("Script starting ----------------- Cdb File...: %s ", strCDB))


   maintCounter = 0                                         -- maintainance counter
   upTimeCounter = 0                                        -- uptime counter in minutes

   bDebugCheckBL = false                                    -- true if debugging luaCheckBL
   bDebugLogBL = false                                      -- true if debugging luaLogBL
   bDebugLogForward = false                                 -- true if debugging luaLogForward
   bDebugLogCache = false                                   -- true if debugging luaLogCache
   bDebugRetNXDOMAIN = false                                -- true if debugging luaRetNXDOMAIN



-- -----------------------------------------------------------------------------------------------

-- -----------------------------------------------------------------------------------------------
-- setup servers to use
   warnlog(string.format("Script starting ----------------- %s ", "*** setup servers to use ***"))
-- -----------------------------------------------------------------------------------------------

--newServer({address="64.6.64.6:53",       name="Verisign_1", pool="masterpool"})       -- verisign dns server #1
--newServer({address="64.6.65.6:53",       name="Verisign_2", pool="masterpool"})       -- verisign dns server #2
newServer({address="8.8.8.8:53",         name="Google_1", pool="masterpool"})         -- google dns server #1
newServer({address="8.8.4.4:53",         name="Google_2", pool="masterpool"})         -- google dns server #2
--newServer({address="208.67.222.222:53",  name="Opendns_1", pool="masterpool"})        -- opendns dns server #1
--newServer({address="208.67.220.220:53",  name="Opendns_2", pool="masterpool"})        -- opendns dns server #2


-- -----------------------------------------------------------------------------------------------
-- set up the cache 
-- 10000 ->  maximum number of entries stored in the cache (required)
-- 86400 ->  maximum lifetime of an entry in the cache (seconds)
--     0 ->  minimum TTL an entry should have to be considered for insertion in the cache (seconds)
--    60 ->  TTL used for a Server Failure or a Refused response (seconds)
--    60 ->  TTL that will be used when a stale cache entry is returned (seconds)
   warnlog(string.format("Script starting ----------------- %s ", "*** setup cache *** "))
-- -----------------------------------------------------------------------------------------------

   pc = newPacketCache(10000, 86400, 0, 60, 60)         -- new cache
   getPool("masterpool"):setCache(pc)                   -- masterpool cache


   setStaleCacheEntriesTTL(3600)			-- If no backends working, use cached data

							-- NEW CMD - declare a named cache with entries
     ncx = getNamedCache("xxx")
--     getNamedCache("xxx"):init("MAP", "ALL", strCDB, 900000)  -- map  - load in entire cdb
     getNamedCache("xxx"):init("LRU", "ALL", strCDB, 10000)     -- lru  - least recently used cache, std version
--   getNamedCache("xxx"):init("LRU2", "ALL", strCDB, 10000)    -- lru2 - least recently used cache, original version

--   if (ncx:isFileOpen() == false)
   if (getNamedCache("xxx"):isFileOpen() == false)
   then
       warnlog(string.format("Script starting ----------------- *** ERROR! COULD NOT LOAD DB: %s ", strCDB))
   else
       warnlog(string.format("Script starting ----------------- *** CDB Data Base Opened OK.: %s ", strCDB))
   end

-- -----------------------------------------------------------------------------------------------
-- listen on local port 5200
   warnlog(string.format("Script starting ----------------- %s ", "*** listen on port 0.0.0.0:5200 for DNS requests ***"))
-- -----------------------------------------------------------------------------------------------

   setLocal("0.0.0.0:5200")


   rlBlkLst = newRemoteLogger('127.0.0.1:60000')              -- rpz hit protobuf handler for local address, port 60,000
   rlCache  = newRemoteLogger('127.0.0.1:60000')              -- cache hit protobuf handler for local address, port 60,000
   rlFwd    = newRemoteLogger('127.0.0.1:60000')              -- forward protobuf handler for local address, port 60,000


-- -----------------------------------------------------------------------------------------------
-- maintenance() function called every second

   function maintenance()

   if ((maintCounter % 60) == 0) then                     -- do this once a minute
       print(string.format("\n    maintenance() - %s", os.date("%X-%x")))
       print(string.format("\n    uptimeCounter: %d", upTimeCounter))
       upTimeCounter = upTimeCounter + 1

       local tableStat = getStatisticsCounters()          -- display statistics
       for k, v in pairs( tableStat ) do
           print(string.format("       %-23s  %d ", k, v))
       end

       print(string.format("----------------------------------"))

       local tableStat2 = ncx:getStats()          -- display statistics
       for k, v in pairs( tableStat2 ) do
           print(string.format("       %-23s  %s ", k, v))
       end

       print(string.format("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))

--[[
       if upTimeCounter == 20 then
          print(string.format("calling reset...."))
--          nc:reset()				-- experimental
          nc:init("CDB", "ALL", strCDB,1)       -- experimental
          print(string.format("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"))
       end
--]]

   end
   maintCounter = maintCounter + 1
   end

-- -----------------------------------------------------------------------------------------------
-- luaCheckBL() - check for rpz hit
-- if in blacklist then spoof response
-- else forward normally to masterpool 
   warnlog(string.format("Script starting ----------------- %s ", "*** luaCheckBL() *** "))
-- -----------------------------------------------------------------------------------------------

    function luaCheckBL(dq)

--	print(string.format("luaCheckBL -> calling lookupQuestTag with key: %s ", dq.qname:toString()))

--	local iResult = nc:lookupQuestTag(dq)		-- test #2 -- 
--	local iResult = ncx:lookupQuestTag(dq)		-- test #2A better method -- 
	local iResult = getNamedCache("xxx"):lookupQuestTag(dq) -- alternate method of calling

--	print(string.format("luaCheckBL -> back from lookupQuestTag "))

	if(iResult > 0) and (iResult < 3)       -- 0 = no hit, 1 = cdb, 2 = cache, 3 = cdb_no_data, 4 = cache_no_data
	then
--		print(string.format("luaCheckBL -> lookupQuestTag - returned data: %s ", dq:getTag("data")))
		return DNSAction.None, ""	-- continue to the next rule
	else
--		print(string.format("luaCheckBL -> lookupQuestTag - NOT FOUND IN CACHE"))
	end

	return DNSAction.Pool, "masterpool"		-- use the specified pool to forward this query

    end

-- -----------------------------------------------------------------------------------------------


-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a BlackList (RPZ) hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogBL() ->  127.0.0.1:60000 ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogBL(dr, pbMsg)		-- this is the lua code that executes for a request




              
   local tableTags = dr:getTagArray()			-- get array of tags inserted by setTag() - NEW LUA COMMAND - 5/24/2017



   local tablePB = {}
   for k, v in pairs( tableTags) do
	table.insert(tablePB, k .. ", " .. v)
   end

   pbMsg:setTagArray(tablePB)		   	-- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017


 
   pbMsg:setResponseCode(dnsdist.NXDOMAIN)        	-- set protobuf response code to be NXDOMAIN




   local strReqName = dr.qname:toString()		  -- get request dns name


  pbMsg:setProtobufResponseType()	   		-- set time, but no RR - no seconds or uSec values


--   pbMsg:setProtobufResponseType(os.time(), 789) 	-- set optional time seconds and optional micro-second value

--   pbMsg:setProtobufResponseType(os.time())	   	-- set optional time seconds, but no uSec value


   blobData = '\127' .. '\000' .. '\000' .. '\001'	-- 127.0.0.1, note: lua 5.1 can only embed decimal not hex

   pbMsg:addResponseRR(strReqName, 1, 1, 456, blobData)    -- set protobuf to look like a response and not a query, insert query time  -- NEW LUA COMMAND
                                                -- strReqName - The DNS name that was sent by the client to be looked up.
						-- rr type 1 - ‘A’ ,  a 32 bit type ipv4 address
						-- rr class 1 -  internet address
						-- rr ttl - time-to-live in seconds	
						-- rr blob data - the 32 bit ipv4 hex address



end



-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a normal forwarding happens
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogForward() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogForward(dr, pbMsg)


--  local tableTags = {}                 -- create a table
--  tableTags["Trans"] = "FWD"           -- add transaction type to table
--  pbMsg:setTagArray(tableTags)	 -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, FWD")		 -- note, due to internal structure of dnsdist, info can't be passed previously by setTag()




end




-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a Cache hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogCache() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogCache(dr, pbMsg)		-- this is the lua code that executes after a cache hit

--[[
   print(string.format("DEBUG - DEBUG - DEBUG - luaLogCache() -- start  >>>>>>>>>"))
   local tableTags = dr:getTagArray()			-- get array of tags inserted by setTag() - DEBUG 8/22/2017
   for k, v in pairs( tableTags ) do
        print(string.format("\t Label: %-15s   Value: %s ", k, v))
   end
   print(string.format("DEBUG - DEBUG - DEBUG - luaLogCache() -- end    <<<<<<<<<"))
--]]

--  local tableTags = {}                 -- create a table in order to retrieve info passed by setTag()
--  tableTags["Trans"] = "CACHE"         -- add transaction type to table
--  pbMsg:setTagArray(tableTags)	 -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, CACHE")

end




-- ----------------------------------------------------------------------------------------------
								-- put this here so blacklist sends out protobuf......
function luaRetNXDOMAIN(dq)

	return DNSAction.Nxdomain, ""		-- return NXDOMAIN response to client
end




-- -----------------------------------------------------------------------------------------------
-- Rules
   warnlog(string.format("Script starting ----------------- %s ", "*** setting rules *** "))
-- -----------------------------------------------------------------------------------------------


   addLuaAction(AllRule(), luaCheckBL)		              -- first, check blacklist, if match process next rule below, else send to "masterpool"

   addAction(AllRule(), RemoteLogAction(rlBlkLst, luaLogBL))  -- then send out protobuf for rpz hit 

   addLuaAction(AllRule(), luaRetNXDOMAIN)		      -- then send nxdomain response back to the client.

   addAction(AllRule(), PoolAction("masterpool"))	      -- direct requests that are not RPZ to pool "masterpool"		


   addCacheHitResponseAction(AllRule(), RemoteLogResponseAction(rlCache, luaLogCache))	-- used to send out protobuf on cache hit 

 
   addResponseAction(AllRule(), RemoteLogResponseAction(rlFwd, luaLogForward))		-- used to send out protobuf on forward (normal) out 

-- -----------------------------------------------------------------------------------------------
-- finished setting up script
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script finished ----------------- %s ", os.date("%X-%x")))

