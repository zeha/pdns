-- -----------------------------------------------------------------------------------------------
-- dnsdist2-complex.conf
-- Seth Ornstein - sornstein@globalcyberalliance.org
-- 7/12/2017
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script starting ----------------- %s ", "dnsdist2-complex.conf"))

   warnlog(string.format("Script starting ----------------- %s ", os.date("%X-%x")))

   warnlog(string.format("Script starting ----------------- Lua Version: %s  - (should be 5.1)", _VERSION))



   strCPackage = "../../zzz-gca-example/lua-tinycdb-0.2-modified-Makefile"        -- where cdb library is located
   strLibrary  = "cdb"                                      -- the name of the tinycdb library
   strDatabase = "../../zzz-gca-example/CDB_Database/blocklist.cdb"		    -- location of cdb database
   strTestDns1 = "1jw2mr4fmky.net"                          -- test #1 dns lookup name
   strTestDns2 = "google.com"                               -- test #2 dns lookup name

   maintCounter = 0                                         -- maintainance counter

   bDebugCheckBL = false                                    -- true if debugging luaCheckBL
   bDebugLogBL = false                                      -- true if debugging luaLogBL
   bDebugLogForward = false                                 -- true if debugging luaLogForward
   bDebugLogCache = false                                   -- true if debugging luaLogCache
   bDebugRetNXDOMAIN = false                                -- true if debugging luaRetNXDOMAIN



-- -----------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------
-- tinycdb - 5/4/2017
-- -----------------------------------------------------------------------------------------------


   warnlog(string.format("Script starting ----------------- *** C package path addition.: %s ***", strCPackage))
 
   package.cpath = package.cpath .. ';' .. strCPackage .. '/?.so'

   warnlog(string.format("Script starting ----------------- *** Load lua-tinycdb library: %s ***", strLibrary))

   cdb = require(strLibrary)      

   warnlog(string.format("Script starting ----------------- *** Load RPZ cdb database...: %s ***", strDatabase))

   db = cdb.open(strDatabase)

   if (db == nil)
   then
       warnlog(string.format("Script starting ----------------- *** COULD NOT LOAD DB.......: %s ***", strDatabase))
   end

   local tValue = db:get(strTestDns1)            -- "search for test key, return test value"
   if(tValue == nil)
   then
   	warnlog(string.format("Script starting ----------------- *** Test RPZ   Key: %s   Value: nil ***   ", strTestDns1))
   else
   	warnlog(string.format("Script starting ----------------- *** Test RPZ   Key: %s   Value: %s   Len: %d  ***", strTestDns1, tValue, string.len(tValue)))
   end

   local tValue2 = db:get(strTestDns2)                       -- "search for test key, return test value"
   if(tValue2 == nil)
   then
  	warnlog(string.format("Script starting ----------------- *** Test RPZ   Key: %s   Value: nil ***", strTestDns2))
   else
  	warnlog(string.format("Script starting ----------------- *** Test RPZ   Key: %s   Value: %s   Len: %d ***", strTestDns2, tValue2, string.len(tValue2)))
   end
 
   local iBlackListCount = 0
   for k, v in db:pairs() do
      iBlackListCount = iBlackListCount + 1
   end
   warnlog(string.format("Script starting ----------------- *** RPZ entries: %d ***", iBlackListCount))

-- -----------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------

-- -----------------------------------------------------------------------------------------------
-- setup servers to use
   warnlog(string.format("Script starting ----------------- %s ", "*** setup servers to use ***"))
-- -----------------------------------------------------------------------------------------------

--newServer({address="149.112.112.112:53", name="Gca_1", pool="masterpool"})            -- gca dns server #1
--newServer({address="149.112.149.112:53", name="Gca_2", pool="masterpool"})            -- gca dns server #2
--newServer({address="64.6.64.6:53",       name="Verisign_1", pool="masterpool"})       -- verisign dns server #1
--newServer({address="64.6.65.6:53",       name="Verisign_2", pool="masterpool"})       -- verisign dns server #2
newServer({address="8.8.8.8:53",         name="Google_1", pool="masterpool"})         -- google dns server #1
newServer({address="8.8.4.4:53",         name="Google_2", pool="masterpool"})         -- google dns server #2
--newServer({address="208.67.222.222:53",  name="Opendns_1", pool="masterpool"})        -- opendns dns server #1
--newServer({address="208.67.220.220:53",  name="Opendns_2", pool="masterpool"})        -- opendns dns server #2


-- -----------------------------------------------------------------------------------------------
-- set up the cache 
-- 10000 ->  maximum number of entries stored in the cache (required)
-- 86400 ->  maximum lifetime of an entry in the cache (seconds)
--     0 ->  minimum TTL an entry should have to be considered for insertion in the cache (seconds)
--    60 ->  TTL used for a Server Failure or a Refused response (seconds)
--    60 ->  TTL that will be used when a stale cache entry is returned (seconds)
   warnlog(string.format("Script starting ----------------- %s ", "*** setup cache *** "))
-- -----------------------------------------------------------------------------------------------

   pc = newPacketCache(10000, 86400, 0, 60, 60)         -- new cache
   getPool("masterpool"):setCache(pc)                   -- masterpool cache


   setStaleCacheEntriesTTL(3600)			-- If no backends working, use cached data


-- -----------------------------------------------------------------------------------------------
-- listen on local port 5200
   warnlog(string.format("Script starting ----------------- %s ", "*** listen on port 0.0.0.0:5200 for DNS requests ***"))
-- -----------------------------------------------------------------------------------------------

   setLocal("0.0.0.0:5200")


   rlBlkLst = newRemoteLogger('127.0.0.1:60000')              -- protobuf handler for local address, port 60,000
   rlCache  = newRemoteLogger('127.0.0.1:60000')              -- protobuf handler for local address, port 60,000
   rlFwd    = newRemoteLogger('127.0.0.1:60000')              -- protobuf handler for local address, port 60,000


-- -----------------------------------------------------------------------------------------------
-- maintenance() function called every second

   function maintenance()

   if ((maintCounter % 60) == 0) then                     -- do this once a minute
       print(string.format("\n    maintenance() - %s", os.date("%X-%x")))
--[[
       local tablePoolServers = getPoolServers("masterpool")

       for k, v in pairs( tablePoolServers ) do           -- display pool servers
           print(string.format("    maint-#1() -> poolServer: %s    Name: %s   Adr: %s", k, v:getName(), v:getNameWithAddr()))
       end

       local tableServers = getServers()                  -- display servers
       for k, v in pairs( tableServers ) do
           print(string.format("    maint-#2() -> Server....: %s    Name: %s   Adr: %s", k, v:getName(), v:getNameWithAddr()))
       end
--]]
       local tableStat = getStatisticsCounters()          -- display statistics
       for k, v in pairs( tableStat ) do
           print(string.format("       %-23s  %d ", k, v))
       end


   end
   maintCounter = maintCounter + 1
   end

-- -----------------------------------------------------------------------------------------------
-- luaCheckBL() - check blacklist using lua-tinydns - 5/5/2017
-- if in blacklist then spoof response
-- else forward normally to masterpool 
   warnlog(string.format("Script starting ----------------- %s ", "*** luaCheckBL() *** "))
-- -----------------------------------------------------------------------------------------------

    function luaCheckBL(dq)

        if (bDebugCheckBL)
          then
               print(string.format("luaCheckBL -> qname.: %s ", dq.qname:toString()))

               print(string.format("luaCheckBL -> qtype.: %d ", dq.qtype))
               print(string.format("luaCheckBL -> from..: %s ", dq.remoteaddr:toStringWithPort()))
               print(string.format("luaCheckBL -> opcode: %d ", dq.opcode))
               print(string.format("luaCheckBL -> rcode.: %d ", dq.rcode))
               print(string.format("luaCheckBL -> qclass: %d ", dq.qclass))
               print(string.format("luaCheckBL -> DO....: %s ", tostring(dq:getDO())))
               print(string.format("luaCheckBL -> Len...: %d ", dq.len))	 
               print(string.format("luaCheckBL -> Size..: %d ", dq.size))	 
               print(string.format("luaCheckBL -> TCP...: %s ", tostring(dq.tcp)))
          end


	local tKey   = dq.qname:toString()                      -- get dns name client requested to be looked up
	if(tKey ~= nil)
     	then
		local tKey2  = string.sub(tKey, 1, string.len(tKey) - 1)   -- get rid of final period at end of dnsname
                if (bDebugCheckBL)
                  then
                       print(string.format("luaCheckBL -> tKey2.: %s ", tKey2))
                  end
   		local tValue = db:get(tKey2) 			-- lookup entry in cdb rpz database and return string or nil if not found
		if(tValue ~= nil) 
		then
                        dq:setTag("Trans", "RPZ")                 		-- label this transaction as rpz for protobuf - NEW LUA COMMAND - 5/22/2017
                        dq:setTag("RPZ-Info", tValue)             		-- store blacklist extra data in dq for protobuf later -- NEW LUA COMMAND - 5/22/2017
                        dq:setTag("lua-time", os.date("%X-%x"))   		-- an example of storing extra data -- NEW LUA COMMAND - 5/22/2017
                        dq:setTag("lua-ver", _VERSION)            		-- another example of storing extra data -- NEW LUA COMMAND - 5/22/2017
                        dq:setTag("From", dq.remoteaddr:toStringWithPort())  	-- store blacklist extra data in dq for protobuf later -- NEW LUA COMMAND - 5/22/2017
                        dq:setTag("TCP", tostring(dq.tcp))                   	-- store blacklist extra data in dq for protobuf later -- NEW LUA COMMAND - 5/22/2017

                        local tableTags = {}                                    -- create a table as an experiment
                        tableTags["Test1"] = "One Two Three"                    -- add transaction type to table
                        tableTags["Test2"] = "Four Five Six"                    -- add transaction type to table
                        dq:setTagArray(tableTags)                               -- store table in dq for protobuf later -- NEW LUA COMMAND - 6/2/2017

                        if (bDebugCheckBL)
                          then
        		       print(string.format("luaCheckBL -> RpzHit: %s   **********", tValue))
  			       print(string.format("--"))
                          end

			return DNSAction.None, ""	-- continue to the next rule

		end
	end

        if (bDebugCheckBL)
          then
               print(string.format("luaCheckBL -> return DNSAction.Pool to masterpool "))
  	       print(string.format("--"))
          end

	return DNSAction.Pool, "masterpool"		-- use the specified pool to forward this query

    end

-- -----------------------------------------------------------------------------------------------
-- declare a Lua action functino to alter the protobuf when a BlackList (RPZ) hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogBL() ->  127.0.0.1:60000 ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogBL(dr, pbMsg)		-- this is the lua code that executes for a request


   if (bDebugLogBL)
     then
          print(string.format("luaLogBL -> qname: %s   qtype: %d   from: %s   TCP: %s ", dr.qname:toString(), dr.qtype, dr.remoteaddr:toStringWithPort(), tostring(dr.tcp)))
          print(string.format("luaLogBL -> pb: %s ", pbMsg:toDebugString())) 
     end


   if (bDebugLogBL)
     then
          print(string.format("luaLogBL -> dr:getTagArray() "))       
     end
              
   local tableTags = dr:getTagArray()			-- get array of tags inserted by setTag() - NEW LUA COMMAND - 5/24/2017

   if (bDebugLogBL)
     then
          for k, v in pairs( tableTags ) do
              print(string.format("\t Label: %-15s   Value: %s ", k, v))
          end
     end

   if (bDebugLogBL)
     then
          print(string.format("luaLogBL-> Test adding to table tableTags"))
          tableTags["dude1"] = "test1"					-- test adding extra entries to table
          tableTags["dude2"] = "test2"					-- test adding extra entries to table
          tableTags["dude3"] = "test3"					-- test adding extra entries to table
          tableTags["dude4"] = "test4"					-- test adding extra entries to table
     end


   local tablePB = {}
   for k, v in pairs( tableTags) do
	table.insert(tablePB, k .. ", " .. v)
   end

   if (bDebugLogBL)
     then
          print(string.format("luaLogBL-> setTagArray(tablePB)"))
     end


   pbMsg:setTagArray(tablePB)		   	-- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017


   if (bDebugLogBL)
     then
          print(string.format("luaLogBL-> setResponseCode(dnsdist.NXDOMAIN)"))
     end

 
   pbMsg:setResponseCode(dnsdist.NXDOMAIN)        -- set protobuf response code to be NXDOMAIN


   if (bDebugLogBL)
     then
          print(string.format("luaLogBL-> get dns name"))
     end


   local strReqName = dr.qname:toString()		  -- get request dns name


   if (bDebugLogBL)
     then
          print(string.format("luaLogBL-> strReqName = %s", strReqName))
     end



  pbMsg:setProtobufResponseType()	   		-- set time, but no RR - no seconds or uSec values

--   pbMsg:setProtobufResponseType(os.time())	   	-- set optional time seconds, but no uSec value
--   pbMsg:setProtobufResponseType(os.time(), 789) 	-- set optional time seconds and optional micro-second value


   blobData = '\127' .. '\000' .. '\000' .. '\001'	-- 127.0.0.1, note: lua 5.1 can only embed decimal not hex

   pbMsg:addResponseRR(strReqName, 1, 1, 456, blobData)    -- set protobuf to look like a response and not a query, insert query time  -- NEW LUA COMMAND
                                                -- strReqName - The DNS name that was sent by the client to be looked up.
						-- rr type
						-- rr class
						-- rr ttl	
						-- rr blob data  

   if (bDebugLogBL)
     then
          print(string.format("--"))
     end


end



-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a normal forwarding happens
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogForward() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogForward(dr, pbMsg)


   if (bDebugLogForward)
     then
          print(string.format("luaLogForward -> qname: %s   qtype: %d   from: %s   TCP: %s ", dr.qname:toString(), dr.qtype, dr.remoteaddr:toStringWithPort(), tostring(dr.tcp)))
          print(string.format("luaLogForward -> opcode: %d ", dr.opcode))
          print(string.format("luaLogForward -> rcode.: %d ", dr.rcode))
          print(string.format("luaLogForward -> qclass: %d ", dr.qclass))
          print(string.format("luaLogForward -> len...: %d ", dr.len))
          print(string.format("luaLogForward -> pb: %s ", pbMsg:toDebugString()))  
     end

   pbMsg:setTag("Trans, FWD")


   if (bDebugLogForward)
     then
          print(string.format("--"))
     end

end




-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a Cache hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogCache() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogCache(dr, pbMsg)		-- this is the lua code that executes after a cache hit


   if (bDebugLogCache)
     then
          print(string.format("luaLogCache -> qname: %s   qtype: %d   from: %s   TCP: %s ", dr.qname:toString(), dr.qtype, dr.remoteaddr:toStringWithPort(), tostring(dr.tcp)))
     end

   pbMsg:setTag("Trans, CACHE")


   if (bDebugLogCache)
     then
          print(string.format("--"))
     end

end




-- ----------------------------------------------------------------------------------------------
								-- put this here so blacklist sends out protobuf......
function luaRetNXDOMAIN(dq)

    if (bDebugRetNXDOMAIN)
      then
	   print(string.format("luaRetNXDOMAIN() - return NXDOMAIN to client"))
           print(string.format("--"))
      end
	return DNSAction.Nxdomain, ""		-- return NXDOMAIN response to client
end




-- -----------------------------------------------------------------------------------------------
-- Rules
   warnlog(string.format("Script starting ----------------- %s ", "*** setting rules *** "))
-- -----------------------------------------------------------------------------------------------


   addLuaAction(AllRule(), luaCheckBL)		              -- first, check blacklist, if match process next rule below, else send to "masterpool"

   addAction(AllRule(), RemoteLogAction(rlBlkLst, luaLogBL))  -- then send out protobuf for rpz hit 

   addLuaAction(AllRule(), luaRetNXDOMAIN)		      -- then send nxdomain response back to the client.

   addAction(AllRule(), PoolAction("masterpool"))	      -- direct requests that are not RPZ to pool "masterpool"		


   addCacheHitResponseAction(AllRule(), RemoteLogResponseAction(rlCache, luaLogCache))	-- used to send out protobuf on cache hit 

 
   addResponseAction(AllRule(), RemoteLogResponseAction(rlFwd, luaLogForward))		-- used to send out protobuf on forward (normal) out 

-- -----------------------------------------------------------------------------------------------
-- finished setting up script
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script finished ----------------- %s ", os.date("%X-%x")))

