-- -----------------------------------------------------------------------------------------------
-- dnsdist-named-cache-test-3.conf - named cache example with Ari's version - 10/22/2017 
-- walk lookup test - left to right - 12/10/2017
--                 
-- Seth Ornstein - sornstein@globalcyberalliance.org
-- 10/22/2017
-- for use in testing out new Lua "named cache" commands for dnsdist
-- git clone -b dnsdist-mod2 https://github.com/GlobalCyberAlliance/pdns.git
--
--
-- -----------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------
-- sleep function 
   function sleep(n)
     warnlog(string.format("sleep %d second.", n))
     os.execute("sleep " .. tonumber(n))
   end
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script starting ----------------- %s ", "Ari's protobuf code with spoofing - loadFromCDB()"))

   warnlog(string.format("Script starting ----------------- %s ", "dnsdist-named-cache-spoof-load.conf"))

   warnlog(string.format("Script starting ----------------- %s ", os.date("%X-%x")))

   warnlog(string.format("Script starting ----------------- Lua Version: %s  - (should be 5.1)", _VERSION))

   strCDB = "../../zzz-gca-example/CDB_Database/blocklist.cdb" 

   warnlog(string.format("Script starting ----------------- Cdb File...: %s ", strCDB))


   maintCounter = 0                                         -- maintainance counter
   upTimeCounter = 0                                        -- uptime counter in minutes

-- -----------------------------------------------------------------------------------------------

-- -----------------------------------------------------------------------------------------------
-- setup servers to use
   warnlog(string.format("Script starting ----------------- %s ", "*** setup servers to use ***"))
-- -----------------------------------------------------------------------------------------------

--newServer({address="64.6.64.6:53",       name="Verisign_1", pool="masterpool"})       -- verisign dns server #1
--newServer({address="64.6.65.6:53",       name="Verisign_2", pool="masterpool"})       -- verisign dns server #2
newServer({address="8.8.8.8:53",         name="Google_1", pool="masterpool"})         -- google dns server #1
newServer({address="8.8.4.4:53",         name="Google_2", pool="masterpool"})         -- google dns server #2
--newServer({address="208.67.222.222:53",  name="Opendns_1", pool="masterpool"})        -- opendns dns server #1
--newServer({address="208.67.220.220:53",  name="Opendns_2", pool="masterpool"})        -- opendns dns server #2


-- -----------------------------------------------------------------------------------------------
-- set up the cache 
-- 10000 ->  maximum number of entries stored in the cache (required)
-- 86400 ->  maximum lifetime of an entry in the cache (seconds)
--     0 ->  minimum TTL an entry should have to be considered for insertion in the cache (seconds)
--    60 ->  TTL used for a Server Failure or a Refused response (seconds)
--    60 ->  TTL that will be used when a stale cache entry is returned (seconds)
   warnlog(string.format("Script starting ----------------- %s ", "*** setup cache *** "))
-- -----------------------------------------------------------------------------------------------

   pc = newPacketCache(10000, 86400, 0, 60, 60)         -- new cache
   getPool("masterpool"):setCache(pc)                   -- masterpool cache


   setStaleCacheEntriesTTL(3600)			-- If no backends working, use cached data

   warnlog(string.format("Script starting ----------------- *** Creating named cache using.: %s ", strCDB))


   getNamedCache("aaa"):bindToCDB(strCDB, 50000, "all")	-- named cache - lru cache using cdb file, 50000 max entries in cache and store all attempts  

   getNamedCache("bbb"):bindToCDB(strCDB, 10000)	-- named cache - lru cache using cdb file, 10000 max entries in cache and default only store cdb hits 

   getNamedCache("ccc"):bindToCDB(strCDB)		-- named cache - lru cache using cdb file  

							-- NOTE: named cache "xxx" is the one actually used by RemoteLogActionX()

   ncx = getNamedCache("xxx", 0)			-- create a test named cache - optional debug bit settings -> display=1, slow_load=2, malloc_trim=4, test allways hit=16

   getNamedCache("xxx"):loadFromCDB(strCDB)		-- named cache - load entire cdb file into memory

--   getNamedCache("xxx"):bindToCDB(strCDB, 100000)	-- named cache - lru cache using cdb file, 100000 max entries in cache and default only store cdb hits 

   delayCount = 0
   while(delayCount < 20)
   do
     if (getNamedCache("xxx"):wasFileOpenedOK() == true)
     then
       warnlog(string.format("Script starting ----------------- *** CDB Data Base Opened OK.: %s ", strCDB))
       break
     else
       sleep(1)
     end
     delayCount = delayCount + 1
   end
   if(delayCount >= 20)
   then
       errlog(string.format("Script starting ----------------- *** ERROR! COULD NOT LOAD DB: %s ", strCDB))
   end

-- -----------------------------------------------------------------------------------------------
-- listen on local port 5200
   warnlog(string.format("Script starting ----------------- %s ", "*** listen on port 0.0.0.0:5200 for DNS requests ***"))
-- -----------------------------------------------------------------------------------------------

   setLocal("0.0.0.0:5200")


   rlBlkLst = newRemoteLogger('127.0.0.1:60000')              -- rpz hit protobuf handler for local address, port 60,000
   rlCache  = newRemoteLogger('127.0.0.1:60000')              -- cache hit protobuf handler for local address, port 60,000
   rlFwd    = newRemoteLogger('127.0.0.1:60000')              -- forward protobuf handler for local address, port 60,000

-- -----------------------------------------------------------------------------------------------
-- maintenance() function called every second

   function maintenance()

   if ((maintCounter % 60) == 0) then                     -- do this once a minute
       print(string.format("\n    maintenance() - %s", os.date("%X-%x")))
       print(string.format("\n    uptimeCounter: %d", upTimeCounter))
       upTimeCounter = upTimeCounter + 1

       local tableStat = getStatisticsCounters()          -- display statistics
       for k, v in pairs( tableStat ) do
           print(string.format("       %-23s  %d ", k, v))
       end

       print(string.format("----------------------------------"))

--       local tableStat2 = ncx:getStats()          -- display statistics
       local tableStat2 = getNamedCache("xxx"):getStats() -- display statistics for named cache
       for k, v in pairs( tableStat2 ) do
           print(string.format("       %-23s  %s ", k, v))
       end

       print(string.format("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))

 --      reloadNamedCache("xxx", 100 + maintCounter)        -- experimental for updating on the fly.....
   end
   maintCounter = maintCounter + 1
   end

-- -----------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------
-- luaHello() - say hello for querry
-- -----------------------------------------------------------------------------------------------

    function luaHello(dq)

	print(string.format("luaHello -> HELLO - HELLO -HELLO "))
	return DNSAction.None, ""                       -- continue on to next rule
    end

-- -----------------------------------------------------------------------------------------------
-- -----------------------------------------------------------------------------------------------
-- check for string starting with sub string
-- -----------------------------------------------------------------------------------------------

	function string.starts(String,Start)
   		return string.sub(String,1,string.len(Start))==Start
	end


-- -----------------------------------------------------------------------------------------------
-- Ari's code
-- -----------------------------------------------------------------------------------------------
function checkNamedCache(dq)

--  print(string.format("checkNamedCache(dq) - Ari's code"))

--  local result = getNamedCache("xxx"):lookupQ(dq, 2)		-- original non 'spoof', now with 'walk' - left to right

  local bTest = false
  local strSpoof = "0.0.0.0"

  local strReq = dq.qname:toString()
 
--  print(string.format("checkNamedCache(dq) - %s ", strReq))

  if(string.starts(strReq, "***SPOOF***"))
  then
      strReq = string.gsub(strReq, "***SPOOF***", "")		-- get rid of ***SPOOF***
      strSpoof, strReq = string.match(strReq, "(.*)*(.*)")	-- seperate number & req by character '*'
      bTest = True
  end

--  print(string.format("checkNamedCache(dq) -> FLT req: %s ", strReq))
--  print(string.format("checkNamedCache(dq) -> Counter: %s ", strSpoof))

  local result = getNamedCache("xxx"):lookup(strReq, 2)         -- now with 'walk' - left to right

  if result.found then
     m = newDNSDistProtobufMessage(dq)
     
     local tableTags = dq:getTagArray()
     local tablePB = {}
     for k, v in pairs( tableTags) do
        table.insert(tablePB, k .. ", " .. v)
     end
     
     local strReqName = dq.qname:toString()
     blobData = '\127' .. '\000' .. '\000' .. '\001'
     
     m:setTag("Trans, RPZ")
     m:setTagArray(tablePB)
     m:setResponseCode(dnsdist.NXDOMAIN)
     m:setProtobufResponseType()
     m:addResponseRR(strReqName, 1, 1, 456, blobData)
     
     remoteLog(rlBlkLst, m)
 

     if(bTest == false)
     then
--	 print("luaCheckLogBLK -> return Nxdomain")
         return DNSAction.Nxdomain, ""				-- nxdomain test
     else
-- 	 print("luaCheckLogBLK -> return Spoof")
         return DNSAction.Spoof, strSpoof			-- spoof test
     end
    

  end

  -- There was no match in the named cache; allow rule processing to continue.
  return DNSAction.None, ""
end
-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a normal forwarding happens
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogForward() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogForward(dr, pbMsg)


--  local tableTags = {}                 -- create a table
--  tableTags["Trans"] = "FWD"           -- add transaction type to table
--  pbMsg:setTagArray(tableTags)	 -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, FWD")		 -- note, due to internal structure of dnsdist, info can't be passed previously by setTag()




end

-- -----------------------------------------------------------------------------------------------
-- declare a Lua action function to alter the protobuf when a Cache hit occurs
   warnlog(string.format("Script starting ----------------- %s ", "*** luaLogCache() ***"))
-- -----------------------------------------------------------------------------------------------

function luaLogCache(dr, pbMsg)		-- this is the lua code that executes after a cache hit

--[[
   print(string.format("DEBUG - DEBUG - DEBUG - luaLogCache() -- start  >>>>>>>>>"))
   local tableTags = dr:getTagArrayResp()			-- get array of tags inserted by setTag() - DEBUG 8/22/2017
   for k, v in pairs( tableTags ) do
        print(string.format("\t Label: %-15s   Value: %s ", k, v))
   end
   print(string.format("DEBUG - DEBUG - DEBUG - luaLogCache() -- end    <<<<<<<<<"))
--]]

--  local tableTags = {}                 -- create a table in order to retrieve info passed by setTag()
--  tableTags["Trans"] = "CACHE"         -- add transaction type to table
--  pbMsg:setTagArray(tableTags)	 -- store tableTags in the 'tags' field of the protobuf - NEW LUA COMMAND - 5/24/2017

   pbMsg:setTag("Trans, CACHE")

end

-- -----------------------------------------------------------------------------------------------
-- Rules
   warnlog(string.format("Script starting ----------------- %s ", "*** setting rules *** "))
-- -----------------------------------------------------------------------------------------------


 
   addLuaAction(AllRule(), checkNamedCache)		      -- Ari's code

--   addLuaAction(AllRule(), luaHello)		              -- say hello in lua - debugging to show 'next' rule from above

   addAction(AllRule(), PoolAction("masterpool"))	      -- direct requests that are not RPZ to pool "masterpool"		

   addCacheHitResponseAction(AllRule(), RemoteLogResponseAction(rlCache, luaLogCache))	-- used to send out protobuf on cache hit 

   addResponseAction(AllRule(), RemoteLogResponseAction(rlFwd, luaLogForward))		-- used to send out protobuf on forward (normal) out 

-- -----------------------------------------------------------------------------------------------
-- finished setting up script
-- -----------------------------------------------------------------------------------------------

   warnlog(string.format("Script finished ----------------- %s ", os.date("%X-%x")))

